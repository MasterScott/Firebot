name: Build Status

# Only runs after PRs have been merged into master
on:
  push:
    branches: 'master'

jobs:
  build:
    name: Compile Bundles
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout master branch
        uses: 'actions/checkout@v2'

      - name: Fetch tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Read package.json
        id: package
        uses: gregoranders/nodejs-project-info@v0.0.1

      - name: 'Check: package version has corrosponding git tag'
        id: tagged
        shell: bash
        run: git show-ref --tags --verify --quiet -- "refs/tags/v${{ steps.package.outputs.version }}" && echo "::set-output name=tagged::0" || echo "::set-output name=tagged::1"

      - name: Setup Python
        if: steps.tagged.outputs.tagged == 1
        uses: 'actions/setup-python@v1'
        with:
          python-version: '2.7'

      - name: Setup Nodejs
        if: steps.tagged.outputs.tagged == 1
        uses: 'actions/setup-node@v1'
        with:
          node-version: '10.x'

      - name: Build Prep for Windows
        if: steps.tagged.outputs.tagged == 1 && runner.os == 'windows'
        shell: bash
        run: |
          npm config set msvs_version 2015
          npm install --quiet --global --production windows-build-tools@4.0.0

      - name: Build Prep for Linux
        if: steps.tagged.outputs.tagged == 1 && runner.os == 'linux'
        run: sudo apt-get install libx11-dev libxtst-dev libpng-dev

      - name: Install Global Dependencies
        if: steps.tagged.outputs.tagged == 1
        run: npm install --quiet --global --production grunt-cli node-gyp

      - name: Install Project Dependencies
        if: steps.tagged.outputs.tagged == 1
        run: npm install --quiet

      - name: Rebuild Robotjs for Electron
        if: steps.tagged.outputs.tagged == 1
        run: node-gyp rebuild --silent --directory=node_modules/robotjs/ --runtime=electron --target=7.1.9 --arch=x64 --dist-url=https://atom.io/download/atom-shell

      - name: Build for Platform
        if: steps.tagged.outputs.tagged == 1
        run: grunt build

      - name: Upload artifacts
        if: steps.tagged.outputs.tagged == 1
        uses: actions/upload-artifact@v1
        with:
          name: ${{ runner.os }}
          path: './dist/install/${{ runner.os }}/'

  release:
    name: Draft Release
    needs: build
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout master branch
        uses: 'actions/checkout@v2'

      - name: Read package.json
        id: package
        uses: gregoranders/nodejs-project-info@v0.0.1

      - name: 'Check: package version has corrosponding git tag'
        id: tagged
        shell: bash
        run: git show-ref --tags --verify --quiet -- "refs/tags/v${{ steps.package.outputs.version }}" && echo "::set-output name=tagged::0" || echo "::set-output name=tagged::1"

      - name: Download Windows Artifacts
        if: steps.tagged.outputs.tagged == 1
        uses: 'actions/download-artifact@v1'
        with:
          name: 'Windows'
          path: ./bundles/

      - name: Download Linux Artifacts
        if: steps.tagged.outputs.tagged == 1
        uses: 'actions/download-artifact@v1'
        with:
          name: 'Linux'
          path: ./bundles/

      - name: Draft Release
        if: steps.tagged.outputs.tagged == 1
        id: draft
        uses: 'actions/create-release@v1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package.outputs.version }}
          release_name: Release v${{ steps.package.outputs.version }}
          body: "## v${{ steps.package.outputs.version }} Update Notes\nedit this  \n\n## Not using V5 yet and curious about what else it has to offer? \nTake a look at the [initial V5 release notes](https://github.com/crowbartools/Firebot/releases/tag/v5.0.0).\n\n## Download the *.exe* to get V5!"
          draft: true
          prerelease: false

      - name: Upload Setup Executable File
        if: steps.tagged.outputs.tagged == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft.outputs.upload_url }}
          asset_path: './bundles/FirebotV5Setup.exe'
          asset_name: 'Firebot-v${{ steps.package.outputs.version }}-Setup.exe'
          asset_content_type: application/octet-stream

      - name: Upload RELEASES file
        if: steps.tagged.outputs.tagged == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft.outputs.upload_url }}
          asset_path: './bundles/RELEASES'
          asset_name: 'RELEASES'
          asset_content_type: application/octet-stream

      - name: Upload NUPKG file
        if: steps.tagged.outputs.tagged == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft.outputs.upload_url }}
          asset_path: './bundles/firebotv5-${{ steps.package.outputs.version }}-full.nupkg'
          asset_name: 'firebotv5-${{ steps.package.outputs.version }}-full.nupkg'
          asset_content_type: application/octet-stream

      - name: Upload Tarball file
        if: steps.tagged.outputs.tagged == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft.outputs.upload_url }}
          asset_path: './bundles/Firebot-linux-x64.tar.gz'
          asset_name: 'firebot-v${{ steps.package.outputs.version }}-linux-x64.tar.gz'
          asset_content_type: application/octet-stream